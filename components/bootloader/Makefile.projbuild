#
# Bootloader component
#
# The bootloader is not a real component that gets linked into the project.
# Instead it is an entire standalone project ( in src/) that gets built in 
# the upper projects build directory. This Makefile.projbuild provides the 
# glue to  build the bootloader project from the original project. It 
# basically runs Make in the src/ directory but it needs to zero some variables
# the ESP-IDF project.mk makefile exports first, to not let them interfere.
#
ifndef IS_BOOTLOADER_BUILD

BOOTLOADER_COMPONENT_PATH := $(COMPONENT_PATH)
BOOTLOADER_BUILD_DIR=$(abspath $(BUILD_DIR_BASE)/bootloader)
BOOTLOADER_BIN=$(BOOTLOADER_BUILD_DIR)/bootloader.bin

# Custom recursive make for bootloader sub-project
BOOTLOADER_MAKE=+$(MAKE) -C $(BOOTLOADER_COMPONENT_PATH)/src \
	V=$(V) BUILD_DIR_BASE=$(BOOTLOADER_BUILD_DIR) \

.PHONY: bootloader-clean bootloader-flash bootloader $(BOOTLOADER_BIN)

$(BOOTLOADER_BIN): $(SDKCONFIG_MAKEFILE)
	$(BOOTLOADER_MAKE) $@

bootloader-clean:
	$(BOOTLOADER_MAKE) app-clean

clean: bootloader-clean

bootloader: $(BOOTLOADER_BIN)
	@echo "Bootloader built. Default flash command is:"
	@echo "$(ESPTOOLPY_WRITE_FLASH) 0x1000 $^"

all_binaries: $(BOOTLOADER_BIN)

ESPTOOL_ALL_FLASH_ARGS += 0x1000 $(BOOTLOADER_BIN)

# bootloader-flash calls flash in the bootloader dummy project
bootloader-flash: $(BOOTLOADER_BIN)
	$(ESPTOOLPY_WRITE_FLASH) 0x1000 $^

$(BOOTLOADER_BUILD_DIR):
	mkdir -p $@

else
CFLAGS += -D BOOTLOADER_BUILD=1 -I $(IDF_PATH)/components/esp32/include

endif
